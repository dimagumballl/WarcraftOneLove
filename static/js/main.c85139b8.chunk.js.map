{"version":3,"sources":["App/Head/Head.js","App/Main/MianMenu/MainSlot/SlotInMainSlot/SlotInMainSlot.js","App/Main/MianMenu/MainSlot/MainSlot.js","App/Main/MianMenu/Maps.js","App/Main/MianMenu/MainMenu.js","App/Main/Main.js","App/App.js","serviceWorker.js","index.js"],"names":["Head","className","SlotInMainSlot","id","name","img","description","way","key","src","data-title","MainSlot","Data","map","Maps","path","MainMenu","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gVAeeA,MAZf,WACI,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,SAAf,WAEI,4BAAI,yCACJ,4BAAI,4C,uBCWLC,MAhBf,YAMG,IALCC,EAKF,EALEA,GACAC,EAIF,EAJEA,KAEAC,GAEF,EAHEC,YAGF,EAFED,KAGA,OADF,EADEE,IAGI,yBAAKN,UAAU,YAAYO,IAAKL,GAC5B,yBAAKM,IAAKJ,IACV,uBAAGK,aAAYN,GAAOA,GACtB,8CCiBGO,MA5Bf,YAA0B,IAAPC,EAAM,EAANA,KACf,OACI,yBAAKX,UAAU,YACX,yBAAKA,UAAU,SACX,4BAAQA,UAAU,kBAAkBW,EAAKR,MACxCQ,EAAKC,IAAIA,KAAI,gBACVV,EADU,EACVA,GACAC,EAFU,EAEVA,KACAE,EAHU,EAGVA,YACAD,EAJU,EAIVA,IACAE,EALU,EAKVA,IALU,OAOV,kBAAC,EAAD,CACAC,IAAKL,EACLA,GAAIA,EACJC,KAAMA,EACNE,YAAaA,EACbD,IAAKA,EACLE,IAAKA,UCoBVO,EAzCF,CACLV,KAAK,OACLW,KAAK,QACLF,IAAI,CACA,CACIV,GAAG,EACHC,KAAK,uBACLE,YAAY,qPACZD,IAAI,0CACJE,IAAI,4DAER,CACIJ,GAAG,EACHC,KAAK,uBACLE,YAAY,qPACZD,IAAI,0CACJE,IAAI,4DAER,CACIJ,GAAG,EACHC,KAAK,uBACLE,YAAY,qPACZD,IAAI,0CACJE,IAAI,4DAER,CACIJ,GAAG,EACHC,KAAK,uBACLE,YAAY,qPACZD,IAAI,0CACJE,IAAI,4DAER,CACIJ,GAAG,EACHC,KAAK,uBACLE,YAAY,qPACZD,IAAI,0CACJE,IAAI,8DCvBLS,MAVf,WACI,OACI,yBAAKf,UAAU,SACX,kBAAC,EAAD,CACIW,KAAME,MCKPG,MAVf,WACI,OACI,yBAAKhB,UAAU,QAEX,yBAAKA,UAAU,SACX,kBAAC,EAAD,SCMDiB,MATf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEPC,SAASC,eAAe,SDwHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c85139b8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Head.css'\r\n\r\nfunction Head(){\r\n    return(\r\n        <div className=\"MenuHead\">\r\n            <div className=\"Backg\">\r\n                SaloNet.\r\n                <li><button>Home</button></li>\r\n                <li><button>Maps</button></li>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Head\r\n","import React from 'react'\r\nimport './SlotInMainSlot.css'\r\n\r\n\r\nfunction SlotInMainSlot({\r\n    id,\r\n    name,\r\n    description,\r\n    img,\r\n    way\r\n}){\r\n    return(\r\n        <div className=\"smoleSlot\" key={id}>\r\n            <img src={img}/>\r\n            <p data-title={name}>{name}</p>\r\n            <button>download</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SlotInMainSlot","import React from 'react'\r\nimport './ForMS.css'\r\nimport SlotInMainSlot from './SlotInMainSlot/SlotInMainSlot'\r\n\r\nfunction MainSlot({Data}){\r\n    return(\r\n        <div className=\"FullSlot\">\r\n            <div className=\"Backg\">\r\n                <button className=\"MainSlotbutton\">{Data.name}</button>\r\n                {Data.map.map(({\r\n                    id,\r\n                    name,\r\n                    description,\r\n                    img,\r\n                    way\r\n                })=>(\r\n                    <SlotInMainSlot\r\n                    key={id}\r\n                    id={id}\r\n                    name={name}\r\n                    description={description}\r\n                    img={img}\r\n                    way={way}\r\n                />\r\n                ))}\r\n                \r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainSlot","\r\n const Maps= {\r\n        name:\"Maps\",\r\n        path:\"/Maps\",\r\n        map:[\r\n            {\r\n                id:1,\r\n                name:\"Troll_vs._Elves_v4.2\",\r\n                description:\"<li>Last Updated: 10:56, 18th Fev 2020</li><li>Type: Strategy / Risk, Tower (Defense / TD / Maul / Wars)</li><li>Category: Medieval / Warcraft</li><li>Map Size: 256x256</li><li>Playable Map Size: 244x244</li><li>Suggested Players: 5 - 11</li>\",\r\n                img:\"/Data/Maps/Troll_vs._Elves_v4.2/img.jpg\",\r\n                way:\"/Data/Maps/Troll_vs._Elves_v4.2/Troll_vs._Elves_v4.2.w3x\"\r\n            },\r\n            {\r\n                id:2,\r\n                name:\"Troll_vs._Elves_v4.2\",\r\n                description:\"<li>Last Updated: 10:56, 18th Fev 2020</li><li>Type: Strategy / Risk, Tower (Defense / TD / Maul / Wars)</li><li>Category: Medieval / Warcraft</li><li>Map Size: 256x256</li><li>Playable Map Size: 244x244</li><li>Suggested Players: 5 - 11</li>\",\r\n                img:\"/Data/Maps/Troll_vs._Elves_v4.2/img.jpg\",\r\n                way:\"/Data/Maps/Troll_vs._Elves_v4.2/Troll_vs._Elves_v4.2.w3x\"\r\n            },\r\n            {\r\n                id:3,\r\n                name:\"Troll_vs._Elves_v4.2\",\r\n                description:\"<li>Last Updated: 10:56, 18th Fev 2020</li><li>Type: Strategy / Risk, Tower (Defense / TD / Maul / Wars)</li><li>Category: Medieval / Warcraft</li><li>Map Size: 256x256</li><li>Playable Map Size: 244x244</li><li>Suggested Players: 5 - 11</li>\",\r\n                img:\"/Data/Maps/Troll_vs._Elves_v4.2/img.jpg\",\r\n                way:\"/Data/Maps/Troll_vs._Elves_v4.2/Troll_vs._Elves_v4.2.w3x\"\r\n            },\r\n            {\r\n                id:4,\r\n                name:\"Troll_vs._Elves_v4.2\",\r\n                description:\"<li>Last Updated: 10:56, 18th Fev 2020</li><li>Type: Strategy / Risk, Tower (Defense / TD / Maul / Wars)</li><li>Category: Medieval / Warcraft</li><li>Map Size: 256x256</li><li>Playable Map Size: 244x244</li><li>Suggested Players: 5 - 11</li>\",\r\n                img:\"/Data/Maps/Troll_vs._Elves_v4.2/img.jpg\",\r\n                way:\"/Data/Maps/Troll_vs._Elves_v4.2/Troll_vs._Elves_v4.2.w3x\"\r\n            },\r\n            {\r\n                id:5,\r\n                name:\"Troll_vs._Elves_v4.2\",\r\n                description:\"<li>Last Updated: 10:56, 18th Fev 2020</li><li>Type: Strategy / Risk, Tower (Defense / TD / Maul / Wars)</li><li>Category: Medieval / Warcraft</li><li>Map Size: 256x256</li><li>Playable Map Size: 244x244</li><li>Suggested Players: 5 - 11</li>\",\r\n                img:\"/Data/Maps/Troll_vs._Elves_v4.2/img.jpg\",\r\n                way:\"/Data/Maps/Troll_vs._Elves_v4.2/Troll_vs._Elves_v4.2.w3x\"\r\n            }\r\n        ]\r\n    }\r\nexport default Maps","import React from 'react'\r\nimport '../Main.css'\r\nimport MainSlot from './MainSlot/MainSlot'\r\nimport Maps from \"./Maps\"\r\n\r\nfunction MainMenu(){\r\n    return(\r\n        <div className=\"MenuS\">\r\n            <MainSlot\r\n                Data={Maps}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainMenu","import React from 'react';\r\nimport './Main.css'\r\nimport MainMenu from './MianMenu/MainMenu'\r\n\r\nfunction Main(){\r\n    return(\r\n        <div className=\"Main\">\r\n            \r\n            <div className=\"Backg\">\r\n                <MainMenu/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Main","import React from 'react';\nimport '../common/style/style.css'\nimport Head from './Head/Head'\nimport './App.css'\nimport Main from './Main/Main'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Head/>\n      <Main/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom'\n\nReactDOM.render(\n    <HashRouter>\n        <App />\n    </HashRouter>,\n document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}